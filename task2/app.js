/* Задача 2 - Снежинка
Предположим, что снежинка образуется так: из центра вырастает 6 кристалликов - отрезков длины L, 
углы между соседними отрезками равны 60; из их "свободных" концов вырастает по 5 отрезков; 
соседние отрезки образуют углы по 60, длины этих отрезков в K раз меньше L; из их "свободных" 
концов аналогично вырастает по 5 новых отрезков, длина которых еще в К раз меньше, и так растет N 
"уровней" снежинки. Длина кристаллика на каждом уровне в K раз меньше длины кристаллика на предыдущем уровне. 
(Базовый примитив – 6-и лучевая звездочка и частично построенная снежинка 3-го уровня показаны на рисунке.) 
Написать алгоритм, рисующий снежинку для любого уровня N.
Пояснения: Для решения задачи допускается использование произвольного языка программирования. 
Преобразование графических координат от одной звездочки к другой, можно опустить, условно храня все параметры 
(центр, размеры, направление и т.п.)) текущей звездочки или луча в некой структуре X. Вызов процедуры рисования 
снежинки при этом будет выглядеть так: Снежинка (N, X) В тексте процедуры можно пользоваться вызовами примитивов рисования
Луч(X) – рисование текущего луча
Звезда (Х) – рисование примитивной звездочки. */

const canvas = document.getElementById("sneg");
const ctx = canvas.getContext("2d");

k = 75; // Длина луча
n = 6; // Количество лучей
g = 5; // Глубина рекурсии

function snezhinka(x, y, r, c) {
    if (c < 1) {
        return;
    }

    for (let i = 0; i < n; i++) {
        const alpha = 2 * Math.PI * i / n;
        let xd = Math.round(x + r * Math.sin(alpha));
        let yd = Math.round(y + r * Math.cos(alpha));
        ctx.beginPath();
        ctx.moveTo(x, y);
        ctx.lineTo(xd, yd);
        ctx.stroke();
        snezhinka(xd, yd, r / 2, c - 1);
    }
}

snezhinka(250, 200, k, g);